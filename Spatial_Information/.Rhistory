mar = c(3,2,2,1), tcl = -0.5, mgp = c(3,1,0), family='')
hist(status, main='Host condition (morbid = 0)', ylab = 'Host obs')
hist(otu, nclass=100, ylab = 'Reads', main='each observation')
nobs <- gjamTrimY(otu, minObs = 1, OTHER = F)$nobs
hist(nobs, nclass=100, ylab = 'Total reads per OTU', main='Full sample')
tmp <- gjamTrimY(otu, minObs = 100)
y   <- tmp$y
dim(fungEnd$y)               # all OTUs
dim(y)                       # trimmed data
tail(colnames(y))            # 'other' class added
ydata <- cbind(status, y)
S     <- ncol(ydata)
typeNames    <- rep('CC',S)   # composition count data
str(ydata)
typeNames[1] <- 'PA'
xdata$host <- relevel(xdata$host,'acerRubr')
rl <- list(r = 5, N = 20)
ml <- list(ng = 2000, burnin = 500, typeNames = typeNames, reductList = rl)
output <- gjamGibbs(~ host*poly, xdata, ydata, modelList = ml)
S <- ncol(ydata)
specColor     <- rep('black',S)
specColor[1]  <- 'red' # highlight host status
plotPars      <- list(corLines=F, specColor = specColor, GRIDPLOTS=T,
specLabs = F, sdScaleY = T, SMALLPLOTS = F)
fit <- gjamPlot(output, plotPars)
require('gjam"')
require('gjam')
library(gjam)
f <- gjamSimData(n = 500, S = 10, Q = 3, typeNames = 'CA')
summary(f)
install.packages('repmis')
install.packages("repmis")
install.packages("repmis")
install.packages("repmis")
library(repmis)
library(gjam)
f <- gjamSimData(n = 500, S = 10, Q = 3, typeNames = 'CA')
summary(f)
f$formula
par(bty = 'n', mfrow = c(1,2), family='')
h <- hist(c(-1,f$y),nclass = 50,plot = F)
plot(h$counts,h$mids,type = 's')
plot(sim$w,sim$y,cex = .2)
f$formula
ml <- list(ng = 1000, burnin = 100, typeNames = f$typeNames)
out <- gjamGibbs(f$formula, f$xdata, f$ydata, modelList = ml)
summary(out)
summary(out$chains)
summary(out$modelSummary)
out$modelSummary$classBySpec
f <- gjamSimData(n = 500, S = 10, typeNames = 'CA')
ml <- list(ng = 1000, burnin = 200, typeNames = f$typeNames)
out <- gjamGibbs(f$formula, f$xdata, f$ydata, modelList = ml)
pl <- list(trueValues = f$trueValues, GRIDPLOTS = T, SMALLPLOTS = F)
gjamPlot(output = out, plotPars = pl)
plot(f$trueValues$beta, out$parameterTables$betaMu, cex = .2)
plot(f$trueValues$corSpec, out$parameterTables$corMu, cex = .2)
plot(f$y,out$modelSummary$yMu, cex = .2)
par(bty = 'n', mfrow = c(1,3), family='')
plot(f$trueValues$beta, out$parameterTables$betaMu, cex = .2)
plot(f$trueValues$corSpec, out$parameterTables$corMu, cex = .2)
plot(f$y,out$modelSummary$yMu, cex = .2)
library(repmis)
d <- "https://github.com/jimclarkatduke/gjam/blob/master/forestTraits.RData?raw=True"
source_data(d)
xdata <- forestTraits$xdata[,c(1,2,8)]
xdata$temp <- round(xdata$temp,2)
xdata$deficit <- round(xdata$deficit,2)
xdata[1:5,]
formula <- as.formula( ~ temp + deficit + soil )
tmp <- model.frame(formula,data=xdata,na.action=NULL)
x <- model.matrix(formula, data=tmp)
x[1:5,]
formula <- as.formula( ~ temp*soil )
tmp <- model.frame(formula,data=xdata,na.action=NULL)
x <- model.matrix(formula, data=tmp)
x[1:5,]
formula <- as.formula( ~ temp + I(temp^2) + deficit )
?I
tmp <- model.frame(formula,data=xdata,na.action=NULL)
x <- model.matrix(formula, data=tmp)
x[1:5,]
formula <- as.formula( ~ temp*deficit + I(temp^2) + I(deficit^2) )
tmp <- model.frame(formula,data=xdata,na.action=NULL)
x <- model.matrix(formula, data=tmp)
x[1:5,]
library(gjam)
ydata <- gjamReZero(forestTraits$treesDeZero) # extract y
dim(ydata)
ydata[1:5,1:6]
rl <- list(r = 8, N = 20)
ml <- list(ng = 1000, burnin = 100, typeNames = 'DA', reductList = rl)
form <- as.formula( ~ temp*deficit + I(temp^2) + I(deficit^2) )
out <- gjamGibbs(form, xdata = xdata, ydata = ydata, modelList = ml)
library(gjam)
library(repmis)
f <- gjamSimData(n = 500, S = 10, Q = 3, typeNames = 'CA')
summary(f)
f$formula
par(bty = 'n', mfrow = c(1,2), family='')
h <- hist(c(-1,f$y),nclass = 50,plot = F)
plot(h$counts,h$mids,type = 's')
plot(sim$w,sim$y,cex = .2)
ml <- list(ng = 1000, burnin = 100, typeNames = f$typeNames)
out <- gjamGibbs(f$formula, f$xdata, f$ydata, modelList = ml)
summary(out)
summary(out$chains)
summary(out$modelSummary)
out$modelSummary$classBySpec
f <- gjamSimData(n = 500, S = 10, typeNames = 'CA')
ml <- list(ng = 1000, burnin = 200, typeNames = f$typeNames)
out <- gjamGibbs(f$formula, f$xdata, f$ydata, modelList = ml)
pl <- list(trueValues = f$trueValues, GRIDPLOTS = T, SMALLPLOTS = F)
gjamPlot(output = out, plotPars = pl)
par(bty = 'n', mfrow = c(1,3), family='')
plot(f$trueValues$beta, out$parameterTables$betaMu, cex = .2)
plot(f$trueValues$corSpec, out$parameterTables$corMu, cex = .2)
plot(f$y,out$modelSummary$yMu, cex = .2)
#My Data section
library(repmis)
d <- "https://github.com/jimclarkatduke/gjam/blob/master/forestTraits.RData?raw=True"
source_data(d)
xdata <- forestTraits$xdata[,c(1,2,8)]
xdata$temp <- round(xdata$temp,2)
xdata$deficit <- round(xdata$deficit,2)
xdata[1:5,]
formula <- as.formula( ~ temp + deficit + soil )
tmp <- model.frame(formula,data=xdata,na.action=NULL)
x <- model.matrix(formula, data=tmp)
x[1:5,]
formula <- as.formula( ~ temp*soil )
tmp <- model.frame(formula,data=xdata,na.action=NULL)
x <- model.matrix(formula, data=tmp)
x[1:5,]
formula <- as.formula( ~ temp + I(temp^2) + deficit )
tmp <- model.frame(formula,data=xdata,na.action=NULL)
x <- model.matrix(formula, data=tmp)
x[1:5,]
formula <- as.formula( ~ temp*deficit + I(temp^2) + I(deficit^2) )
tmp <- model.frame(formula,data=xdata,na.action=NULL)
x <- model.matrix(formula, data=tmp)
x[1:5,]
library(gjam)
ydata <- gjamReZero(forestTraits$treesDeZero) # extract y
dim(ydata)
ydata[1:5,1:6]
rl <- list(r = 8, N = 20)
ml <- list(ng = 1000, burnin = 100, typeNames = 'DA', reductList = rl)
form <- as.formula( ~ temp*deficit + I(temp^2) + I(deficit^2) )
out <- gjamGibbs(form, xdata = xdata, ydata = ydata, modelList = ml)
gjamPlot(output = out, plotPars = pl)
x
y
str(x)
str(xdata)
str(ydata)
gjamPlot(output = out, plotPars = pl)
out
plotPars <- list(SMALLPLOTS = F, GRIDPLOTS=T, SAVEPLOTS = T, outfolder = 'plots')
plotPars <- list(SMALLPLOTS = F, GRIDPLOTS=T, SAVEPLOTS = T, outfolder = 'plots')
gjamPlot(output = out, plotPars = pl)
?I
library(gjam)
ydata  <- gjamReZero(forestTraits$treesDeZero)  # extract y
dim(ydata)
ydata[1:5,1:6]
rl   <- list(r = 8, N = 20)
ml   <- list(ng = 1000, burnin = 100, typeNames = 'DA', reductList = rl)
form <- as.formula( ~ temp*deficit + I(temp^2) + I(deficit^2) )
out  <- gjam(form, xdata = xdata, ydata = ydata, modelList = ml)
library(gjam)
out  <- gjam(form, xdata = xdata, ydata = ydata, modelList = ml)
?gjam
library("gjam", lib.loc="~/R/win-library/3.2")
install.packages("gjam")
install.packages("gjam")
install.packages("gjam")
library(gjam)
source('~/.active-rstudio-document', echo=TRUE)
install.packages('gjam')
install.packages("gjam")
library(gjam)
library(gjam)
install.packages('gjam')
library(gjam)
library(repmis)
library(gjam)
ydata  <- gjamReZero(forestTraits$treesDeZero)  # extract y
d <- "https://github.com/jimclarkatduke/gjam/blob/master/forestTraits.RData?raw=True"
source_data(d)
xdata <- forestTraits$xdata[,c(1,2,8)]
ydata  <- gjamReZero(forestTraits$treesDeZero)  # extract y
dim(ydata)
ydata[1:5,1:6]
rl   <- list(r = 8, N = 20)
ml   <- list(ng = 1000, burnin = 100, typeNames = 'DA', reductList = rl)
form <- as.formula( ~ temp*deficit + I(temp^2) + I(deficit^2) )
out  <- gjam(form, xdata = xdata, ydata = ydata, modelList = ml)
?gjam
head(ydata)
out  <- gjam(form, xdata = xdata, ydata = ydata, modelList = ml)
ydata <- ydata[!acerSpic]
ydata <- ydata[!ydata$acerSpic]
ydata <- ydata[!$acerSpic
ydata <- ydata[!$acerSpic]
ydata <- ydata[!ydata$acerSpic]
setwd("~/GitHub/WisconsinNovelty")
?read.table
?read.OGR
prarie_xy <- read.table('prairie_xy.txt')
prairie_xy <- read.table('prairie_xy.txt')
plot(prairie_xy)
library(maps)
map("state", "wisconsin", fill = TRUE, col = "white", namesonly = TRUE, plot = FALSE)
map("state", "wisconsin", fill = TRUE, col = "white", namesonly = T)
plot(prairie_xy)
map("state", "wisconsin", fill = TRUE, col = "white", namesonly = T)
points(prairie_xy)
map("state", "wisconsin")
points(prairie_xy)
map("county", "wisconsin")
points(prairie_xy)
?map
View(prairie_xy)
View(prairie_xy)
myShapeInR<-readOGR(".","WI_County_Bnds")
library(rgdal)
myShapeInR<-readOGR(".","WI_County_Bnds")
myShapeInR<-readOGR(".","WI_County_Bnds.shp")
setwd("~/GitHub/WisconsinNovelty/Spatial_Information/WI_County_Boundaries")
myShapeInR<-readOGR(".","WI_County_Bnds.shp")
myShapeInR<-readOGR(".","WI_County_Bnds")
myShapeInR
plot(myShapeInR)
point(prarie_xy)
points(prarie_xy)
points(prairie_xy)
points(prairie_xy, add=T)
library(raster)
setwd("~/GitHub/WisconsinNovelty/Spatial_Information")
WI_raster <- raster('paleon_full_alb_v0.1.tif')
plot(WI_raster)
point(prairie_xy)
points(prairie_xy)
library(proj4)
proj4string <- "+proj=aea +lat_1=42.122774 +lat_2=49.01518 +lat_0=45.568977 +lon_0=-83.248627
+x_0=1000000 +y_0=1000000 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"
pj <- project(prairie_xy, proj4string, inverse=TRUE)
pj <- project(prairie_xy, proj4string)
str(prairie_xy)
?project
proj4string <- "+proj=aea +lat_1=42.122774 +lat_2=49.01518 +lat_0=45.568977 +lon_0=-83.248627 +x_0=1000000 +y_0=1000000 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"
pj <- project(prairie_xy, proj4string)
pj <- project(prairie_xy, proj4string, inverse=T)
colnames(prairie_xy) <- c('x','y')
pj <- project(prairie_xy, proj4string, inverse=T)
pj <- project(prairie_xy, proj4string)
pj <- project(xy = 'prairie_xy', proj4string)
pj <- project(xy = prairie_xy, proj4string)
xy <- data.frame(prairie_xy)
pj <- project(xy, proj4string)
str(xy)
xy <- matrix(prairie_xy)
pj <- project(xy, proj4string)
?spTransform
praire_project <- spTransform(prairie_xy, CRSobj =  '+proj=aea +lat_1=42.122774 +lat_2=49.01518 +lat_0=45.568977 +lon_0=-83.248627 +x_0=1000000 +y_0=1000000 +ellps=GRS80 +datum=NAD83 +units=m +no_defs')
mydf <- structure(list(longitude = prairie_xy$x,
latitude = prairie_xy$y),
.Names = c("longitude","latitude"), class = "data.frame", row.names = c(NA, -8L))
View(mydf)
mydf <- structure(list(longitude = prairie_xy$x,
latitude = prairie_xy$y),
.Names = c("longitude","latitude"), class = "data.frame", row.names = c(NA, -47L))
xy <- mydf[,c(1,2)]
xy
spdf <- SpatialPointsDataFrame(coords = xy, data = mydf,
proj4string = CRS("+proj=aea +lat_1=42.122774 +lat_2=49.01518 +lat_0=45.568977 +lon_0=-83.248627 +x_0=1000000 +y_0=1000000 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
plot(spdf)
plot(myShapeInR)
points(spdf)
spdf
map("county", "wisconsin")
points(spdf)
points(prairie_xy)
spdf$longitude
colnames(prairie_xy) <- c('longitude', 'latitude')
coordinates(df) <- cbind(prairie_xy$longitude , prairie_xy$latitude)
prairie_xy$longitude
coordinates(df) <- cbind(prairie_xy$longitude, prairie_xy$latitude)
df <- cbind(prairie_xy$longitude, prairie_xy$latitude)
?coordinates
coordinates(df)
coordinates(df) <- cbind(prairie_xy$longitude, prairie_xy$latitude)
data.frame(prairie_xy)
coordinates(df) <- cbind(prairie_xy$longitude, prairie_xy$latitude)
str(prairie_xy)
proj4string(prairie_xy) <- CRS("+proj=aea +lat_1=42.122774 +lat_2=49.01518 +lat_0=45.568977 +lon_0=-83.248627 +x_0=1000000 +y_0=1000000 +ellps=GRS80 +datum=NAD83 +units=m +no_defs")
mydf <- structure(list(longitude = prairie_xy$x,
latitude = prairie_xy$y),
.Names = c("longitude","latitude"), class = "data.frame", row.names = c(NA, -47L))
coordinates(mydf) <- cbind(mydf$longitude, mydf$latitude)
mydf
mydf <- structure(list(longitude = prairie_xy$x,
latitude = prairie_xy$y),
.Names = c("longitude","latitude"), class = "data.frame", row.names = c(NA, -47L))
View(mydf)
mydf <- structure(list(longitude = prairie_xy$longitude,
latitude = prairie_xy$latitude),
.Names = c("longitude","latitude"), class = "data.frame", row.names = c(NA, -47L))
coordinates(mydf) <- cbind(mydf$longitude, mydf$latitude)
proj4string(mydf) = CRS("+proj=aea +lat_1=42.122774 +lat_2=49.01518 +lat_0=45.568977 +lon_0=-83.248627 +x_0=1000000 +y_0=1000000 +ellps=GRS80 +datum=NAD83 +units=m +no_defs")
mydf
proj4string(mydf) = CRS("+init=epsg:3175")
proj4string(mydf) = spTransform("+init=epsg:3175")
proj4string(mydf) = spTransform("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
proj4string(mydf) = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
?gridlines
map("county", "wisconsin")
points(prairie_xy)
data(meuse)
coordinates(meuse) = ~x+y
plot(meuse)
plot(gridlines(meuse), add = TRUE)
text(labels(gridlines(meuse)))
title("default gridlines within Meuse bounding box")
meuse
mydf
data(meuse)
coordinates(meuse) = ~x+y
data(meuse)
coordinates(meuse) = ~x+y
plot(meuse)
plot(gridlines(meuse), add = TRUE)
text(labels(gridlines(meuse)))
title("default gridlines within Meuse bounding box")
proj4string(meuse) <- CRS("+init=epsg:28992")
crs.longlat <- CRS("+init=epsg:4326")
meuse_ll <- spTransform(meuse, crs.longlat)
proj4string(meuse) <- CRS("+init=epsg:28992")
prairie_xy
meuse
data(meuse)
meuse
dat <- prairie_xy
str(dat)
str(meuse)
colnames(dat) <- c('x','y')
data
dat
coordinates(dat) = ~x+y
plot(dat)
plot(gridlines(dat),add=T)
proj4string(dat) <- CRS("+init=epsg:4326")
crs.aea <- CRS(" +init=epsg:3175")
dat_aea <- spTransform((dat, crs.aea))
dat
data(meuse)
coordinates(meuse) = ~x+y
plot(meuse)
plot(gridlines(meuse), add = TRUE)
text(labels(gridlines(meuse)))
title("default gridlines within Meuse bounding box")
proj4string(meuse) <- CRS("+init=epsg:28992")
crs.longlat <- CRS("+init=epsg:4326")
meuse
meuse_ll
grd <- gridlines(meuse_ll)
grd_x <- spTransform(grd, CRS("+init=epsg:28992"))
dat <- praire_xy
dat <- prairie_xy
colnames(dat) <- c('x','y')
coordinates(dat) = ~x+y
proj4string(dat) <- CRS("+init=epsg:4326")
crs_aea <- CRS(" +init=epsg:3175")
dat_aea <- spTransform((dat, crs.aea))
dat_aea <- spTransform(dat, crs.aea)
dat_aea
colnames(prairie_xy) <- c('x','y')
coordinates(prairie_xy) = ~x+y
proj4string(prairie_xy) <- CRS("+init=epsg:4326")
crs_aea <- CRS(" +init=epsg:3175")
prairie_aea <- spTransform(prairie_xy, crs.aea)
plot(WI_raster)
points(prairie_aea)
?points
points(prairie_aea, type = 16)
points(prairie_aea, type = c(16))
points(prairie_aea, par=c(16))
par()
points(prairie_aea, pch=16
points(prairie_aea, pch=16)
points(prairie_aea, pch=16)
points(prairie_aea, pch=16, cex=0.5)
?par
points(prairie_aea, pch=16, cex=0.5)
points(prairie_aea, pch=16, cex=0.1)
points(prairie_aea, pch=16, cex=0.1)
points(prairie_aea, pch=16)
points(prairie_aea, pch=16, cex=0.9)
WI_raster$
WI_raster
WI_raster$1
WI_raster
WI_raster@data$paleon_full_alb_v0.1
WI_raster@data
WI_raster@data@band
str(WI_raster)
class(WI_raster)
WI_raster
plot(WI_raster, value=1)
getValues(WI_raster)
WI_raster@z
WI_raster@data
WI_raster@data@values
WI_raster@data@values==1
WI_raster<-paleon_raster
paleon_raster <- raster('paleon_full_alb_v0.1.tif')
WI_raster<-paleon_raster
WI_raster[WI_raster[]!=11]<-0
plot(WI_raster)
WI_raster<-paleon_raster[]=11
paleon_raster <- raster('paleon_full_alb_v0.1.tif')
WI_raster<-paleon_raster[]=11
WI_raster<-paleon_raster[]==11
plot(WI)
plot(WI_raster)
WI_raster
WI_raster<-paleon_raster[]==11
WI_raster<-raster(paleon_raster[]==11)
WI_raster<-paleon_raster[]==11
WI_raster[WI_raster[]!=11]<-0
plot(WI_raster)
paleon_raster
paleon_raster == 1
plot(paleon_raster= 11)
plot(paleon_raster== 11)
paleon_raster
paleon_raster@data@values
paleon_raster@data@max
paleon_raster@data@attributes
WI_raster<-paleon_raster[]==11
plot(WI_raster)
raster(WI_raster)<-paleon_raster[]==11
plot(paleon_raster==11)
res(paleon_raster)
hasValues(paleon_raster)
paleon_raster
paleon_raster == 11
paleon_raster == 1
plot(paleon_raster==1)
plot(paleon_raster==2)
plot(paleon_raster==4)
plot(paleon_raster==11)
?getValues
getValues(paleon_raster==11)
rasterFromCells(paleon_raster, values=11)
paleon_raster[paleon_raster!=11] <- NA
plot(paleon_raster)
paleon_raster <- raster('paleon_full_alb_v0.1.tif')
WI_raster<-paleon_raster[paleon_raster=11]
plot(WI_raster)
plot(paleon_raster)
WI_raster<-paleon_raster[paleon_raster==11]
plot(WI_raster)
str(WI)
str(WI_raster)
WI_raster<-paleon_raster[paleon_raster!=11] <- NA
plot(WI_raster)
WI_raster[paleon_raster!=11] <- NA
paleon_raster[paleon_raster!=11] <- NA
paleon_raster <- raster('paleon_full_alb_v0.1.tif')
WI_raster <- paleon_raster[paleon_raster!=11] <- NA
plot(WI_raster)
paleon_raster[paleon_raster!=11] <- NA
WI_raster <- paleon_raster
plot(WI_)
plot(WI_raster)
?extent
paleon_raster <- raster('paleon_full_alb_v0.1.tif')
plot(paleon_raster)
plot(paleon_raster, xlim=c(260000,720000))
plot(paleon_raster, xlim=c(260000,720000), ylim=c(650000, 1120000))
plot(paleon_raster, xlim=c(260000,720000), ylim=c(650000, 1200000))
points(prairie_aea, pch=16, cex=0.9)
plot(paleon_raster, xlim=c(260000,720000), ylim=c(650000, 1200000))
points(prairie_aea, pch=16, cex=0.9)
plot(rasterToPolygons(paleon_raster), add=TRUE, border='black', lwd=1)
plot(paleon_raster, xlim=c(260000,720000), ylim=c(650000, 1200000))
plot(rasterToPolygons(paleon_raster), add=TRUE, border='black', lwd=1)
plot(paleon_raster, xlim=c(260000,720000), ylim=c(650000, 1200000))
grid <- rasterToPolygons(paleon_raster)
plot(grid, add=TRUE, border='black', lwd=1)
points(prairie_aea, pch=16, cex=0.5)
points(prairie_aea, pch=16, cex=0.3)
plot(paleon_raster, xlim=c(260000,720000), ylim=c(650000, 1200000))
plot(grid, add=TRUE, border='black', lwd=1)
points(prairie_aea, pch=16, cex=0.3)
plot(paleon_raster, xlim=c(260000,720000), ylim=c(650000, 1200000))
plot(grid, add=TRUE, border='black', lwd=1)
points(prairie_aea, pch=16, cex=0.5)
plot(paleon_raster, xlim=c(260000,720000), ylim=c(650000, 1200000), title='AEA 8km Grid with Curtis Points')
plot(paleon_raster, xlim=c(260000,720000), ylim=c(650000, 1200000), meain='AEA 8km Grid with Curtis Points')
plot(paleon_raster, xlim=c(260000,720000), ylim=c(650000, 1200000), main='AEA 8km Grid with Curtis Points')
plot(paleon_raster, xlim=c(260000,720000), ylim=c(650000, 1200000), main='AEA 8km Grid with Curtis Points', xlab='m', ylab='m')
plot(grid, add=TRUE, border='black', lwd=1)
points(prairie_aea, pch=16, cex=0.5)
setwd("~/GitHub/WisconsinNovelty/Spatial_Information")
WI_raster <- raster('WI_AEA_8km_Raster.asc')
plot(WI_raster)
plot(paleon_raster, xlim=c(260000,720000), ylim=c(650000, 1200000), main='AEA 8km Grid with Curtis Points', xlab='m', ylab='m')
plot(grid, add=TRUE, border='black', lwd=1)
points(prairie_aea, pch=16, cex=0.5) #change cex to adjust size of points. default is cex=1, so cex=0.5 means smaller points
